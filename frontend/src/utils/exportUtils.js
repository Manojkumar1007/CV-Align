import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import * as XLSX from 'xlsx';

// PDF Export Functions
export const exportToPDF = async (element, filename = 'evaluation-report') => {
  try {
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      onclone: (clonedDoc) => {
        // Remove interactive elements from the clone
        const buttons = clonedDoc.querySelectorAll('button, .btn');
        buttons.forEach(btn => btn.style.display = 'none');
        
        // Ensure good print styling
        const cards = clonedDoc.querySelectorAll('.card, .score-card');
        cards.forEach(card => {
          card.style.breakInside = 'avoid';
          card.style.pageBreakInside = 'avoid';
        });
      }
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    
    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
    const imgX = (pdfWidth - imgWidth * ratio) / 2;
    const imgY = 10;

    // Add title
    pdf.setFontSize(16);
    pdf.text('CV Evaluation Report', pdfWidth / 2, imgY, { align: 'center' });
    
    // Add the image
    pdf.addImage(imgData, 'PNG', imgX, imgY + 10, imgWidth * ratio, imgHeight * ratio);
    
    // Add footer
    const pageCount = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(
        `Generated by CV-Align on ${new Date().toLocaleDateString()}`,
        pdfWidth / 2,
        pdfHeight - 10,
        { align: 'center' }
      );
      pdf.text(`Page ${i} of ${pageCount}`, pdfWidth - 20, pdfHeight - 10);
    }

    pdf.save(`${filename}.pdf`);
    return true;
  } catch (error) {
    console.error('PDF export failed:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
};

export const exportEvaluationToPDF = async (evaluation) => {
  const filename = `cv-evaluation-${evaluation.candidate_name.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}`;
  
  // Create a temporary element with evaluation data for PDF generation
  const tempDiv = document.createElement('div');
  tempDiv.style.padding = '20px';
  tempDiv.style.fontFamily = 'Arial, sans-serif';
  tempDiv.style.backgroundColor = 'white';
  tempDiv.style.position = 'absolute';
  tempDiv.style.left = '-9999px';
  tempDiv.style.width = '210mm'; // A4 width
  
  tempDiv.innerHTML = `
    <div style="margin-bottom: 30px; text-align: center; border-bottom: 2px solid #3498db; padding-bottom: 20px;">
      <h1 style="color: #2c3e50; margin: 0; font-size: 24px;">CV Evaluation Report</h1>
      <h2 style="color: #3498db; margin: 10px 0; font-size: 20px;">${evaluation.candidate_name}</h2>
      ${evaluation.candidate_email ? `<p style="color: #666; margin: 5px 0;">${evaluation.candidate_email}</p>` : ''}
      <p style="color: #666; margin: 5px 0; font-size: 14px;">CV: ${evaluation.cv_filename}</p>
      <p style="color: #666; margin: 5px 0; font-size: 14px;">Evaluated: ${new Date(evaluation.created_at).toLocaleDateString()}</p>
    </div>
    
    <div style="margin-bottom: 30px;">
      <h3 style="color: #2c3e50; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Evaluation Scores</h3>
      <div style="display: flex; justify-content: space-around; flex-wrap: wrap; gap: 20px; margin: 20px 0;">
        <div style="text-align: center; padding: 15px; border: 2px solid #3498db; border-radius: 10px; min-width: 100px;">
          <div style="font-size: 32px; font-weight: bold; color: #3498db; margin-bottom: 5px;">${evaluation.overall_score}</div>
          <div style="font-weight: bold; margin-bottom: 5px;">Overall Score</div>
          <div style="font-size: 12px; color: #666;">Comprehensive evaluation</div>
        </div>
        <div style="text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 10px; min-width: 100px;">
          <div style="font-size: 24px; font-weight: bold; color: #27ae60; margin-bottom: 5px;">${evaluation.skills_score}</div>
          <div style="font-weight: bold; margin-bottom: 5px;">Skills Match</div>
          <div style="font-size: 12px; color: #666;">Technical skills alignment</div>
        </div>
        <div style="text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 10px; min-width: 100px;">
          <div style="font-size: 24px; font-weight: bold; color: #f39c12; margin-bottom: 5px;">${evaluation.experience_score}</div>
          <div style="font-weight: bold; margin-bottom: 5px;">Experience</div>
          <div style="font-size: 12px; color: #666;">Work experience relevance</div>
        </div>
        <div style="text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 10px; min-width: 100px;">
          <div style="font-size: 24px; font-weight: bold; color: #e67e22; margin-bottom: 5px;">${evaluation.education_score}</div>
          <div style="font-weight: bold; margin-bottom: 5px;">Education</div>
          <div style="font-size: 12px; color: #666;">Educational qualifications</div>
        </div>
      </div>
    </div>
    
    <div style="margin-bottom: 30px;">
      <h3 style="color: #2c3e50; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Overall Feedback</h3>
      <div style="padding: 15px; background-color: #f8f9fa; border-radius: 8px; line-height: 1.6;">
        ${evaluation.feedback.replace(/\n/g, '<br>')}
      </div>
    </div>
    
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 30px;">
      <div>
        <h3 style="color: #27ae60; border-bottom: 1px solid #27ae60; padding-bottom: 10px;">Strengths</h3>
        <div style="padding: 10px;">
          ${evaluation.strengths.split('\n').filter(s => s.trim()).map(strength => 
            `<div style="margin-bottom: 8px; padding: 5px; background-color: #d4edda; border-radius: 4px; font-size: 14px;">âœ“ ${strength}</div>`
          ).join('')}
        </div>
      </div>
      
      <div>
        <h3 style="color: #e74c3c; border-bottom: 1px solid #e74c3c; padding-bottom: 10px;">Areas for Improvement</h3>
        <div style="padding: 10px;">
          ${evaluation.weaknesses.split('\n').filter(w => w.trim()).map(weakness => 
            `<div style="margin-bottom: 8px; padding: 5px; background-color: #f8d7da; border-radius: 4px; font-size: 14px;">âš  ${weakness}</div>`
          ).join('')}
        </div>
      </div>
      
      <div>
        <h3 style="color: #3498db; border-bottom: 1px solid #3498db; padding-bottom: 10px;">Recommendations</h3>
        <div style="padding: 10px;">
          ${evaluation.recommendations.split('\n').filter(r => r.trim()).map(recommendation => 
            `<div style="margin-bottom: 8px; padding: 5px; background-color: #d1ecf1; border-radius: 4px; font-size: 14px;">ðŸ’¡ ${recommendation}</div>`
          ).join('')}
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(tempDiv);
  
  try {
    await exportToPDF(tempDiv, filename);
    document.body.removeChild(tempDiv);
    return true;
  } catch (error) {
    document.body.removeChild(tempDiv);
    throw error;
  }
};

// Excel Export Functions
export const exportToExcel = (data, filename = 'evaluation-data') => {
  try {
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.json_to_sheet(data);
    
    // Auto-size columns
    const colWidths = Object.keys(data[0] || {}).map(key => {
      const maxLength = Math.max(
        key.length,
        ...data.map(row => String(row[key] || '').length)
      );
      return { wch: Math.min(maxLength + 2, 50) };
    });
    worksheet['!cols'] = colWidths;
    
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Evaluations');
    XLSX.writeFile(workbook, `${filename}.xlsx`);
    return true;
  } catch (error) {
    console.error('Excel export failed:', error);
    throw new Error('Failed to generate Excel file. Please try again.');
  }
};

export const exportEvaluationToExcel = (evaluation) => {
  const data = [
    {
      'Candidate Name': evaluation.candidate_name,
      'Email': evaluation.candidate_email || 'N/A',
      'CV Filename': evaluation.cv_filename,
      'Overall Score': evaluation.overall_score,
      'Skills Score': evaluation.skills_score,
      'Experience Score': evaluation.experience_score,
      'Education Score': evaluation.education_score,
      'Feedback': evaluation.feedback.replace(/\n/g, ' | '),
      'Strengths': evaluation.strengths.replace(/\n/g, ' | '),
      'Weaknesses': evaluation.weaknesses.replace(/\n/g, ' | '),
      'Recommendations': evaluation.recommendations.replace(/\n/g, ' | '),
      'Evaluated Date': new Date(evaluation.created_at).toLocaleDateString()
    }
  ];
  
  const filename = `cv-evaluation-${evaluation.candidate_name.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}`;
  return exportToExcel(data, filename);
};

export const exportMultipleEvaluationsToExcel = (evaluations) => {
  const data = evaluations.map(evaluation => ({
    'Candidate Name': evaluation.candidate_name,
    'Email': evaluation.candidate_email || 'N/A',
    'CV Filename': evaluation.cv_filename,
    'Overall Score': evaluation.overall_score,
    'Skills Score': evaluation.skills_score,
    'Experience Score': evaluation.experience_score,
    'Education Score': evaluation.education_score,
    'Feedback': evaluation.feedback.replace(/\n/g, ' | '),
    'Strengths': evaluation.strengths.replace(/\n/g, ' | '),
    'Weaknesses': evaluation.weaknesses.replace(/\n/g, ' | '),
    'Recommendations': evaluation.recommendations.replace(/\n/g, ' | '),
    'Evaluated Date': new Date(evaluation.created_at).toLocaleDateString()
  }));
  
  const filename = `cv-evaluations-export-${Date.now()}`;
  return exportToExcel(data, filename);
};